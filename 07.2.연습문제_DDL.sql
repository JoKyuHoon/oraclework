07.DDL 실습문제
도서관리 프로그램을 만들기 위한 테이블들 만들기
이때, 제약조건에 이름을 부여할 것.
       각 컬럼에 주석달기

1. 출판사들에 대한 데이터를 담기위한 출판사 테이블(TB_PUBLISHER)
   컬럼  :  PUB_NO(출판사번호) NUMBER -- 기본키(PUBLISHER_PK) 
	PUB_NAME(출판사명) VARCHAR2(50) -- NOT NULL(PUBLISHER_NN)
	PHONE(출판사전화번호) VARCHAR2(13) - 제약조건 없음

   - 3개 정도의 샘플 데이터 추가하기
   
   CREATE TABLE TB_PUBLISHER (
    PUB_NO NUMBER PRIMARY KEY,         -- 출판사번호 (기본키)
    PUB_NAME VARCHAR2(50) NOT NULL,    -- 출판사명 (NULL 불가)
    PHONE VARCHAR2(20)                 -- 출판사 전화번호 (제약 없음)
);

DROP TABLE TB_PUBLISHER;

CREATE TABLE TB_PUBLISHER (
    PUB_NO NUMBER CONSTRAINT PUBLISHER_PK PRIMARY KEY, -- 출판사번호 (기본키)
    PUB_NAME VARCHAR2(50) CONSTRAINT PUBLISHER_NN NOT NULL, -- 출판사명 (NOT NULL 제약조건)
    PHONE VARCHAR2(20) -- 출판사 전화번호 (제약조건 없음)
);



2. 도서들에 대한 데이터를 담기위한 도서 테이블(TB_BOOK)
   컬럼  :  BK_NO (도서번호) NUMBER -- 기본키(BOOK_PK)
	BK_TITLE (도서명) VARCHAR2(50) -- NOT NULL(BOOK_NN_TITLE)
	BK_AUTHOR(저자명) VARCHAR2(20) -- NOT NULL(BOOK_NN_AUTHOR)
	BK_PRICE(가격) NUMBER
	BK_PUB_NO(출판사번호) NUMBER -- 외래키(BOOK_FK) (TB_PUBLISHER 테이블을 참조하도록)
			         이때 참조하고 있는 부모데이터 삭제 시 자식 데이터도 삭제 되도록 옵션 지정
   - 5개 정도의 샘플 데이터 추가하기
   
   CREATE TABLE TB_BOOK (
    BK_NO NUMBER,
    BK_TITLE VARCHAR2(50), -- NOT NULL(BOOK_NN_TITLE)
	BK_AUTHOR VARCHAR2(20), -- NOT NULL(BOOK_NN_AUTHOR)
	BK_PRICE NUMBER,
    BK_PUB_NO NUMBER REFERENCES TB_PUBLISHER(PUB_NO)
 );
 
 CREATE TABLE TB_BOOK (
    BK_NO NUMBER CONSTRAINT BOOK_PK PRIMARY KEY,  -- 기본키
    BK_TITLE VARCHAR2(50) CONSTRAINT BOOK_NN_TITLE NOT NULL,  -- NOT NULL
    BK_AUTHOR VARCHAR2(20) CONSTRAINT BOOK_NN_AUTHOR NOT NULL,  -- NOT NULL
    BK_PRICE NUMBER,  
    BK_PUB_NO NUMBER CONSTRAINT BOOK_FK REFERENCES TB_PUBLISHER(PUB_NO) ON DELETE CASCADE  -- 외래키 + 삭제 옵션
);

/*
3. 회원에 대한 데이터를 담기위한 회원 테이블 (TB_MEMBER)
   컬럼명 : MEMBER_NO(회원번호) NUMBER -- 기본키(MEMBER_PK)
   MEMBER_ID(아이디) VARCHAR2(30) -- 중복금지(MEMBER_UQ)
   MEMBER_PWD(비밀번호)  VARCHAR2(30) -- NOT NULL(MEMBER_NN_PWD)
   MEMBER_NAME(회원명) VARCHAR2(20) -- NOT NULL(MEMBER_NN_NAME)
   GENDER(성별)  CHAR(1)-- 'M' 또는 'F'로 입력되도록 제한(MEMBER_CK_GEN)
   ADDRESS(주소) VARCHAR2(70)
   PHONE(연락처) VARCHAR2(13)
   STATUS(탈퇴여부) CHAR(1) - 기본값으로 'N' 으로 지정, 그리고 'Y' 혹은 'N'으로만 입력되도록 제약조건(MEMBER_CK_STA)
   ENROLL_DATE(가입일) DATE -- 기본값으로 SYSDATE, NOT NULL 제약조건(MEMBER_NN_EN)

   - 5개 정도의 샘플 데이터 추가하기
   */
   CREATE TABLE TB_MEMBER(
   MEMBER_NO NUMBER PRIMARY KEY, -- 기본키(MEMBER_PK)
   MEMBER_ID VARCHAR2(30) UNIQUE ,-- 중복금지(MEMBER_UQ)
   MEMBER_PWD VARCHAR2(30) NOT NULL, -- NOT NULL(MEMBER_NN_PWD)
   MEMBER_NAME VARCHAR2(20) NOT NULL, --(MEMBER_NN_NAME)
   CHECK GENDER IN ('M', 'F') CHAR(1), -- 'M' 또는 'F'로 입력되도록 제한(MEMBER_CK_GEN)
   ADDRESS VARCHAR2(70),
   PHONE VARCHAR2(13),
   STATUS CHAR(1) DEFAULT 'N' IN ('Y', 'N'), -- 기본값으로 'N' 으로 지정, 그리고 'Y' 혹은 'N'으로만 입력되도록 제약조건(MEMBER_CK_STA)
   ENROLL_DATE DATE DEFAULT 'SYSDATE' NOT NULL-- 기본값으로 SYSDATE, NOT NULL 제약조건(MEMBER_NN_EN)
);

CREATE TABLE TB_MEMBER (
    MEMBER_NO NUMBER CONSTRAINT MEMBER_PK PRIMARY KEY,  -- 기본키 제약 조건
    MEMBER_ID VARCHAR2(30) CONSTRAINT MEMBER_UQ UNIQUE,  -- 중복 금지 (유니크)
    MEMBER_PWD VARCHAR2(30) CONSTRAINT MEMBER_NN_PWD NOT NULL,  -- NOT NULL
    MEMBER_NAME VARCHAR2(20) CONSTRAINT MEMBER_NN_NAME NOT NULL,  -- NOT NULL
    GENDER CHAR(1) CONSTRAINT MEMBER_CK_GEN CHECK (GENDER IN ('M', 'F')),  -- 'M' 또는 'F'만 허용
    ADDRESS VARCHAR2(70),  
    PHONE VARCHAR2(13),  
    STATUS CHAR(1) DEFAULT 'N' CONSTRAINT MEMBER_CK_STA CHECK (STATUS IN ('Y', 'N')),  -- 'Y' 또는 'N'만 허용
    ENROLL_DATE DATE DEFAULT SYSDATE CONSTRAINT MEMBER_NN_EN NOT NULL  -- 기본값 SYSDATE + NOT NULL
);


4. 어떤 회원이 어떤 도서를 대여했는지에 대한 대여목록 테이블(TB_RENT)
   컬럼  :  RENT_NO(대여번호) NUMBER -- 기본키(RENT_PK)
	RENT_MEM_NO(대여회원번호) NUMBER -- 외래키(RENT_FK_MEM) TB_MEMBER와 참조하도록
			이때 부모 데이터 삭제시 자식 데이터 값이 NULL이 되도록 옵션 설정
	RENT_BOOK_NO(대여도서번호) NUMBER -- 외래키(RENT_FK_BOOK) TB_BOOK와 참조하도록
			이때 부모 데이터 삭제시 자식 데이터 값이 NULL값이 되도록 옵션 설정
	RENT_DATE(대여일) DATE -- 기본값 SYSDATE

   - 3개 정도 샘플데이터 추가하기
    CREATE TABLE TB_RENT(
    RENT_NO NUMBER CONSTRAINT RENT_PK PRIMARY KEY,-- 기본키(RENT_PK)
	RENT_MEM_NO NUMBER CONSTRAINT RENT_FK_MEM REFERENCES TB_MEMBER ON DELETE SET NULL, -- 외래키(RENT_FK_MEM) TB_MEMBER와 참조하도록
	RENT_BOOK_NO NUMBER CONSTRAINT RENT_FK_BOOK REFERENCES TB_MEMBER,-- 외래키(RENT_FK_BOOK) TB_BOOK와 참조하도록
	RENT_DATE DATE DEFAULT SYSDATE -- 기본값 SYSDATE
);

   CREATE TABLE TB_RENT (
    RENT_NO NUMBER CONSTRAINT RENT_PK PRIMARY KEY, -- 기본키(RENT_PK)
    RENT_MEM_NO NUMBER CONSTRAINT RENT_FK_MEM REFERENCES TB_MEMBER(MEMBER_NO) ON DELETE SET NULL, -- 회원 삭제 시 NULL 처리
    RENT_BOOK_NO NUMBER CONSTRAINT RENT_FK_BOOK REFERENCES TB_BOOK(BK_NO) ON DELETE SET NULL, -- 도서 삭제 시 NULL 처리
    RENT_DATE DATE DEFAULT SYSDATE -- 기본값 SYSDATE
);

CREATE TABLE TB_RENT (
    RENT_NO NUMBER CONSTRAINT RENT_PK PRIMARY KEY, -- 대여번호 (기본키)
    RENT_MEM_NO NUMBER CONSTRAINT RENT_FK_MEM REFERENCES TB_MEMBER(MEMBER_NO) ON DELETE SET NULL, -- 회원번호 (외래키)
    RENT_BOOK_NO NUMBER CONSTRAINT RENT_FK_BOOK REFERENCES TB_BOOK(BK_NO) ON DELETE SET NULL, -- 도서번호 (외래키)
    RENT_DATE DATE DEFAULT SYSDATE NOT NULL -- 대여일 (기본값 SYSDATE)
);


SELECT TABLE_NAME 
FROM USER_TABLES
WHERE TABLE_NAME IN ('TB_MEMBER', 'TB_BOOK');

-- 1.
CREATE TABLE TB_CATEGORY(
    NAME VARCHAR2(10) ,
    USE_YN CHAR(1) DEFAULT 'Y'
);
-- 2.
CREATE TABLE TB_CLASS_TYPE(
    NO VARCHAR2(5) PRIMARY KEY,
    NAME VARCHAR2(10) 
);

-- 3.
CREATE TABLE TB_CATEGORY(
    NAME VARCHAR2(10) PRIMARY KEY,
    USE_YN CHAR(1) DEFAULT 'Y'
);

--4.
CREATE TABLE TB_CLASS_TYPE(
    NO VARCHAR2(5) PRIMARY KEY,
    NAME VARCHAR2(10) NOT NULL
);

--5.
ALTER TABLE TB_CLASS_TYPE MODIFY NO VARCHAR2(10);
ALTER TABLE TB_CATEGORY MODIFY CATEGORY_NAME VARCHAR2(20);

--6.  ALTER TABLE 테이블명 CHANGE 기존컬럼명 새컬럼명 컬럼타입;

ALTER TABLE TB_CLASS_TYPE RENAME COLUMN NO TO CLASS_TYPE_NO;

ALTER TABLE TB_CLASS_TYPE RENAME COLUMN NAME TO CLASS_TYPE_NAME;

ALTER TABLE TB_CATEGORY RENAME COLUMN NAME TO CATEGORY_NAME;

--7. ALTER TABLE 테이블명 DROP CONSTRAINT 기존_제약_이름;
ALTER TABLE TB_CLASS_TYPE DROP CONSTRAINT SYS_C007665;
ALTER TABLE TB_CLASS_TYPE ADD CONSTRAINT  PK_TB_CLASS_TYPE PRIMARY KEY (CLASS_TYPE_NO);

ALTER TABLE TB_CATEGORY DROP CONSTRAINT SYS_C007667;
ALTER TABLE TB_CATEGORY ADD CONSTRAINT  PK_CATEGORYE PRIMARY KEY (CATEGORY_NAME);

--8.
INSERT INTO TB_CATEGORY VALUES ('공학', 'Y');
INSERT INTO TB_CATEGORY VALUES ('자연과학', 'Y');
INSERT INTO TB_CATEGORY VALUES ('의학', 'Y');
INSERT INTO TB_CATEGORY VALUES ('예체능', 'Y');
INSERT INTO TB_CATEGORY VALUES ('인문사회', 'Y');
COMMIT;

--9.    - FOREIGN KEY : ALTER TABLE 테이블명 ADD FORIEGN KEY(컬럼명); REFERENCES 참조할 테이블명[(참조할컬럼명)]

CREATE TABLE TB_DEPARTMENT(
    CATEGORY VARCHAR2(20)
);
 ALTER TABLE TB_DEPARTMENT ADD CONSTRAINT FK_DEPARTMENT_CATEGORY FOREIGN KEY(CATEGORY) REFERENCES TB_CATEGORY(CATEGORY_NAME);


--10.
CREATE VIEW  VW_TB_STUDENT AS
SELECT STUDENT_NO AS 학번, STUDENT_NAME AS 학생 이름, STUDENT_ADDRESS AS 주소
FROM TB_STUDENT
WHERE STUDENT_NAME IS NOT NULL;

CREATE OR REPLACE VIEW  VW_TB_STUDENT AS
SELECT STUDENT_NO AS 학번, STUDENT_NAME AS 학생 이름, STUDENT_ADDRESS AS 주소, STUDENT_GENDER AS 성별
FROM TB_STUDENT
WHERE STUDENT_NAME IS NOT NULL;
